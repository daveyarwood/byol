(def {def\}
  (\ {args body}
    {def (head args) (\ (tail args) body)}))

(def\ {apply f xs}
  {eval (join (list f) xs)})

(def\ {empty? coll}
  {== (len coll) 0})

(def\ {take n coll}
  {if (or (== n 0) (empty? coll))
    {}
    {join (head coll)
          (take (- n 1) (tail coll))}})

(def\ {drop n coll}
  {if (or (== n 0) (empty? coll))
    {do coll}
    {drop (- n 1) (tail coll)}})

(def\ {split i coll}
  {list (take i coll) (drop i coll)})

(def\ {flip f x y}
  {eval {f y x}})

(def\ {reverse coll}
  {if (empty? coll)
    {}
    {join (reverse (tail coll)) (head coll)}})

(def\ {nth coll n}
  {if (== n 0)
    {first coll}
    {nth (rest coll) (- n 1)}})

(def\ {second xs} {nth xs 1})
(def\ {third xs} {nth xs 2})
(def\ {fourth xs} {nth xs 3})
(def\ {fifth xs} {nth xs 4})

(def\ {last coll} {first (reverse coll)})

(def\ {contains? coll x}
  {if (empty? coll)
    false
    {if (== (first coll) x)
      true
      {contains? (rest coll) x}}})

(def\ {do & xs}
  {if (empty? xs)
    {}
    {last xs}})

(def\ {map f coll}
  {if (empty? coll)
    {}
    {join (list (f (first coll)))
          (map f (tail coll))}})

(def\ {filter pred coll}
  {if (empty? coll)
    {}
    {join (if (pred (first coll))
            {head coll}
            {})
          (filter pred (tail coll))}})

(def\ {foldl f acc coll}
  {if (empty? coll)
    {do acc}
    {foldl f (f acc (first coll)) (tail coll)}})

(def\ {sum coll}
  {foldl + 0 coll})

(def\ {product coll}
  {foldl * 1 coll})

